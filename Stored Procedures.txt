CS301 - Introduction to Database Systems
                    
Part1:- railwayreservationsystem






Relations in the database:


1.Trains : CREATE TABLE trains (train_id INT, calender_date DATE);
2. Ticket Details : CREATE TABLE ticket_details( pnr VARCHAR , train_id INT , calender_date DATE, class VARCHAR , num_passengers INT, coach_no INT, berth_no INT);




Functions in the database:


1. Function to release train:


CREATE OR REPLACE FUNCTION release_train( train_id_curr INT, calender_date_curr DATE, num_AC_coach INT, num_Sleeper_coach INT)
RETURNS void
AS $$


DECLARE
Current_variable INTEGER := 0;
Seats INTEGER := 0;
AC_availabe INTEGER := num_AC_coach*18;
Sleeper_availabe INTEGER := num_Sleeper_coach*24;
Name_ac varchar := 'ac_seats'||train_id_curr || translate(CAST(calender_date_curr AS TEXT),'-','');
Name_sleeper varchar := 'sleeper_seats'||train_id_curr || translate(CAST(calender_date_curr AS TEXT),'-','');
isTrainAvailable INT;


BEGIN


SELECT count(*) into isTrainAvailable FROM trains WHERE train_id=train_id_curr and calender_date=calender_date_curr;


IF isTrainAvailable > 0 THEN
RETURN;
END IF;


EXECUTE format('CREATE TABLE IF NOT EXISTS %I ( current_seat INT, current_coach INT,seats_available INT,seats_booked INT)',Name_ac);


EXECUTE format('CREATE TABLE IF NOT EXISTS %I ( current_seat INT, current_coach INT,seats_available INT,seats_booked INT)',Name_sleeper);


EXECUTE 'INSERT INTO ' || quote_ident( Name_ac )||' VALUES (' || Current_variable||','||Current_variable||','||AC_availabe||','||Seats||')';


EXECUTE 'INSERT INTO ' || quote_ident( Name_sleeper )||' VALUES ('|| Current_variable||','||Current_variable||','||Sleeper_availabe||','||Seats||')';


EXECUTE 'INSERT INTO  trains VALUES ('||train_id_curr||',$1)'using calender_date_curr;


END;
$$
LANGUAGE plpgsql;




2. Function to book ticket:


CREATE OR REPLACE FUNCTION book_tickets(IN num_passengers INTEGER, IN name_passengers VARCHAR, IN train_no INTEGER, IN doj DATE, IN class VARCHAR)
returns text as $$


declare
ac_seats_availability VARCHAR:='ac_seats'||train_no||translate(CAST(doj AS TEXT),'-','');
sleeper_seats_availability VARCHAR:='sleeper_seats'||train_no||translate(CAST(doj AS TEXT),'-','');
coach_no INT;
berth_no INT;
available_seats INT;
seats_booked INT;
pnr VARCHAR;
isTrainAvailable INT;
output text default '';


Begin
SELECT count(*) into isTrainAvailable FROM trains WHERE train_id=train_no and calender_date=doj;
IF isTrainAvailable=0 THEN output='1';
RETURN output;
END IF;
IF class='AC' THEN


EXECUTE format('LOCK TABLE ONLY %I IN ACCESS EXCLUSIVE MODE',ac_seats_availability);


EXECUTE  format('SELECT current_seat,current_coach,seats_available,seats_booked FROM %I ',ac_seats_availability) INTO berth_no,coach_no,available_seats,seats_booked;


IF  available_seats<num_passengers THEN output='2';
RETURN output;
END IF;
IF available_seats>=num_passengers THEN


EXECUTE format('UPDATE %I SET seats_available = $1',ac_seats_availability) using available_seats-num_passengers;


EXECUTE format('UPDATE %I SET seats_booked = $1',ac_seats_availability) using seats_booked+num_passengers;


seats_booked:=seats_booked+num_passengers;


EXECUTE format('UPDATE %I SET current_seat  = $1',ac_seats_availability) using seats_booked%24;
EXECUTE format('UPDATE %I SET current_coach = $1',ac_seats_availability) using seats_booked/24;
IF berth_no < 10 THEN
pnr:=
train_no||''||translate(CAST(doj AS TEXT),'-','')||'1'||coach_no||'0'||berth_no;
ELSE 
pnr:=
train_no||''||translate(CAST(doj AS TEXT),'-','')||'1'||coach_no||''||berth_no;
END IF;


coach_no:=coach_no+1;
berth_no:=berth_no+1;


EXECUTE format('INSERT INTO ticket_details VALUES($1,$2,$3,$4,$5, $6, $7);') using pnr, train_no, doj, class, num_passengers, coach_no, berth_no;


output=pnr;
RETURN output;


END IF;
END IF;






IF class='SL' THEN


EXECUTE format('LOCK TABLE ONLY %I IN ACCESS EXCLUSIVE MODE',sleeper_seats_availability);


EXECUTE  format('SELECT current_seat,current_coach,seats_available,seats_booked FROM %I ',sleeper_seats_availability) INTO berth_no,coach_no,available_seats,seats_booked;


IF  available_seats<num_passengers THEN output='2';
RETURN output;
END IF;
IF available_seats>=num_passengers THEN


EXECUTE format('UPDATE %I SET seats_available = $1',sleeper_seats_availability) using available_seats-num_passengers;


EXECUTE format('UPDATE %I SET seats_booked = $1',sleeper_seats_availability) using seats_booked+num_passengers;


seats_booked:=seats_booked+num_passengers;


EXECUTE format('UPDATE %I SET current_seat  = $1',sleeper_seats_availability) using seats_booked%24;
EXECUTE format('UPDATE %I SET current_coach = $1',sleeper_seats_availability) using seats_booked/24;
IF berth_no < 10 THEN
pnr:=
train_no||''||translate(CAST(doj AS TEXT),'-','')||'2'||coach_no||'0'||berth_no;
ELSE 
pnr:=
train_no||''||translate(CAST(doj AS TEXT),'-','')||'2'||coach_no||''||berth_no;
END IF;


coach_no:=coach_no+1;
berth_no:=berth_no+1;


EXECUTE format('INSERT INTO ticket_details VALUES($1,$2,$3,$4,$5, $6, $7);') using pnr, train_no, doj, class, num_passengers, coach_no, berth_no;


output=pnr;
RETURN output;


END IF;
END IF;


RETURN output;
end;
$$
language plpgsql;


Part2:- searchportal


Relations in the database:


1.Routes: CREATE TABLE ROUTES(SOURCE VARCHAR,DESTINATION VARCHAR,DEPT_TIME TIME,ARRIVAL_TIME TIME,DAY_REACH INT,DAY_DEPARTURE INT,TRAIN_NO INT);


Functions in the database:


1. Function for searching trains between any two stations:


CREATE OR REPLACE FUNCTION SEARCH(SRC VARCHAR, DEST VARCHAR)
returns text as $$
declare
rec record;
rec2 record;
output text default '';
temp text default '';
begin
        for rec in
        select routes.source as s, routes.destination as d, routes.dept_time as t1, routes.arrival_time as t2, routes.day_reach as d1, routes.day_departure as d2, routes.train_no as l1
        from routes
        where routes.source = src
        loop
                if rec.d=dest
                then
                        output=output||'Direct route found: Train: '||rec.l1||', Source: '||rec.s||', Source_departure_time: '||rec.t1||', Departure_day:'||rec.d2||', Destination: '||rec.d||', Destination_arrival_time: '||rec.t2||', ARRIVAL_DAY: '||rec.d1||'?';
            
                else
                        for rec2 in
                        select routes.source as s2, routes.destination as d, routes.dept_time as t3, routes.arrival_time as t4, routes.day_reach as d1, routes.day_departure as d2, routes.train_no as l2
                        from routes
                        where routes.source=rec.d and routes.destination=dest and (routes.train_no <rec.l1 or routes.train_no > rec.l1 )and ((routes.day_departure=rec.d1 AND routes.dept_time>rec.t2 AND routes.dept_time-rec.t2<'02:00:00') OR (rec.d1<6 AND routes.day_departure-rec.d1=1 AND routes.dept_time<rec.t2 AND rec.t2-routes.dept_time>'22:00:00') OR (rec.d1=6 AND routes.day_departure=0 AND routes.dept_time<rec.t2 AND rec.t2-routes.dept_time>'22:00:00'))
                        loop
                                output=output||'Route with one break: Train1: '||rec.l1||', Train2: '||rec2.l2||', Source: '||rec.s||', Source_departure_time: '||rec.t1||', Departure_day:'||rec.d2||', Temp_Destination: '||rec.d||', Temp_Destination_arrival_time: '||rec.t2||', Temp_Destination_arrival_day: '||rec.d1||', Temp_Destination_departure_time: '||rec2.t3||', Temp_Destination_Departure_day:'||rec2.d2||', Destination: '||rec2.d||', Destination_arrival_time: '||rec2.t4||', Destination_arrival_day:'||rec2.d1 ||'?';
                
            end loop;
                        
                end if;
        end loop;
        return output;
end;
$$
language plpgsql;